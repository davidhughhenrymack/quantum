
include "library";

/** MEMORY **/

qureg seek(quconst memory, int i) {
	return memory[i*width :: width];
}


/** CPU EXECUTION **/

cond qufunct fetch(quconst addr, qureg mem, qureg dest) 
{
	const cells = #mem/width;

	qureg o[cells];
	int cell;

	for cell = 0 to cells - 1
	{
		eq(addr,cell,o[0::1]);
		// dump o;
		// dump mem;
		if o[0::1] { seek(mem,cell) <-> dest; }
		!eq(addr,cell,o[0::1]);
	}	
}

cond qufunct fetch2(quconst addr, quconst mem, quvoid dest) 
{
	const cells = #mem/width;
	int cell;

	quscratch o[cells];

	for cell = 0 to cells - 1
	{
		eq(addr,cell,o[cell::1]);
		if o[cell::1] { 
			seek(mem, cell) -> dest;
		}
	}
}

cond qufunct fetch2a(quconst mem, quconst addr, quvoid out) 
{
	const cells = min(#mem/width, #out);
	int cell;

	for cell = 0 to cells - 1
	{
		eq(addr,cell,out[cell::1]);
	}
}

cond qufunct fetch2b(quconst mem, quconst lookup, quvoid dest) 
{
	const cells = #mem/width;
	int cell;

	for cell = 0 to cells - 1
	{
		if lookup[cell::1] { 
			seek(mem, cell) -> dest;
		}
	}
}

cond qufunct fetch2bs(quconst mem, quconst lookup, int cell) 
{
	quscratch out[width];
	if lookup[cell::1] { 
		seek(mem, cell) -> out; //dest;
		// FanoutC(seek(mem, cell), dest);
	}
}


cond qufunct execute(quconst inst, qureg a, qureg b, qureg ip) 
{
	qureg o[1];

	eq(inst, 1, o);
	if o { inc(a); }
	!eq(inst, 1, o);

	eq(inst, 2, o);
	if o { inc(b); }
	!eq(inst, 2, o);

	eq(inst, 3, o);
	if o { inc(a); }
	!eq(inst, 3, o);

}

procedure run(int cycles, qureg program, qureg a, qureg b)
{
	int cycle;
	int out;

	qureg inst[width];
	qureg ip[width];
	qureg o[width];

	for cycle = 1 to cycles 
	{
		// dump ip;
		// dump inst;
		dump program;

		print "cycle", cycle;
		fetch(ip, program, inst);
		dump o;

		// dump ip;
		// dump inst;
		dump program;

		// execute(inst, a, b, ip);
		!fetch(ip, program, inst);
		
		// inc(ip);
	}



	dump ip;
	dump inst;
	dump program;
}




include "const";

/** GENERAL PURPOSE LIBRARY **/

cond qufunct inc(qureg x) {
	int i;
	quconst e = cond;
	for i = #x-1 to 0 step -1 {
		CNOT(x[i], x[0::i] & e);
	}
}


cond qufunct eq(quconst x, int y, quvoid out) 
{
	quscratch cmp[#x];
	quconst e = cond;
	int i;

	Fanout(x, cmp); 

	for i = 0 to #x-1 {
		if bit(y,i) {
			NOT(cmp[i]);
		}
	}

	NOT(cmp);
	CNOT(out, cmp & e);
}


procedure quickrand(qureg q) {
  int i;
  for i=0 to #q-1 {
  	if random()>0.5 {
  		set(1, q[i]);
  	}
  }
}

/* QCL passes quantum cond through stack on odd way. 
   Adding quconst e fixes broken code. 
*/

/* alternative implementation; comment out if you want */
/* an explicit decomposition using CNot gates          */

cond qufunct FanoutC(quconst a,quvoid b) {
  int i;
  quconst e = cond;
  if #a!=#b { exit "fanout arguments must be of equal size"; }
  for i=0 to #a-1 { CNot(b[i],a[i] & e); }
}

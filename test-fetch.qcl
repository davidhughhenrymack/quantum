

include "cpu";


print "Testing fetch()";

qureg a[width];
qureg dest[width];
qureg mem[cells * width];
qureg o[cells];


int i;
int j;
int k;
int cell;

int tst;

int rOut;
int oOut;
int dOut;
int memIn;
int memOut;
int memInitial;

int fail;
int pass;

// 16434824 is ascending numbers 0 to 7 in three bit cells

set check 1;
set show-regs 1;

for j = 1 to 1 {

	memInitial = floor(random() * 2^(cells*width));

	for i = 1 to 1 // 0 to cells-1
	{

		print "--- Fetch cell", i;

		set(16434824, mem);
		// set(memInitial, mem);
		set(i, a);
		
		measure seek(mem,i), tst;
		measure mem, memIn;
		
		fetch2a(mem, a, o);	

		// I believe the problem is that fanout expects 0 on the dest
		// once those are not, the "incidental causality" breaks down.
		
		dump;

		set log 1;
		set log-state 1;

		for k = 1 to 1 //cells - 1 
		{
			print "--- --- Copy cell", k;
			dump seek(mem, k);
			dump o[k::1];
			fetch2bs(mem, o[0..3], k);
			dump dest;
			dump o;
		}

		print "--- Done";
		
		dump o;
		
		set log 0;

		measure dest, rOut;
		// !fetchpll(a, mem, dest);
		// dump mem;

		measure mem, memOut;

		if rOut == tst and memOut == memIn {
			print i, "Pass: fetched", rOut, "= actual", tst; //, memOut, "=", memIn;
			pass = pass + 1;
		} else {
			// dump o;
			print i, "Fail: fetched", rOut, "!= actual", tst; //, memOut, "=", memIn;
			fail = fail + 1;
		}
		
		reset;
	}
}



if fail > 0 {
	print "Failed" , fail, "times, passed", pass, "times";
} else {
	print "Passed";
}
